// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: msg.proto

#include "msg.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace MyGame {
PROTOBUF_CONSTEXPR MsgHead::MsgHead(
    ::_pbi::ConstantInitialized)
  : type_(0)
{}
struct MsgHeadDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MsgHeadDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MsgHeadDefaultTypeInternal() {}
  union {
    MsgHead _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MsgHeadDefaultTypeInternal _MsgHead_default_instance_;
PROTOBUF_CONSTEXPR RequestLogin::RequestLogin(
    ::_pbi::ConstantInitialized)
  : strname_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , strpass_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , head_(nullptr){}
struct RequestLoginDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RequestLoginDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RequestLoginDefaultTypeInternal() {}
  union {
    RequestLogin _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RequestLoginDefaultTypeInternal _RequestLogin_default_instance_;
PROTOBUF_CONSTEXPR ResponseLogin::ResponseLogin(
    ::_pbi::ConstantInitialized)
  : head_(nullptr)
  , roleid_(0)
  , rolelevel_(0){}
struct ResponseLoginDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResponseLoginDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResponseLoginDefaultTypeInternal() {}
  union {
    ResponseLogin _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResponseLoginDefaultTypeInternal _ResponseLogin_default_instance_;
PROTOBUF_CONSTEXPR RequestLogout::RequestLogout(
    ::_pbi::ConstantInitialized)
  : head_(nullptr)
  , roleid_(0){}
struct RequestLogoutDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RequestLogoutDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RequestLogoutDefaultTypeInternal() {}
  union {
    RequestLogout _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RequestLogoutDefaultTypeInternal _RequestLogout_default_instance_;
PROTOBUF_CONSTEXPR ResponseLogout::ResponseLogout(
    ::_pbi::ConstantInitialized)
  : head_(nullptr)
  , roleid_(0){}
struct ResponseLogoutDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResponseLogoutDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResponseLogoutDefaultTypeInternal() {}
  union {
    ResponseLogout _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResponseLogoutDefaultTypeInternal _ResponseLogout_default_instance_;
PROTOBUF_CONSTEXPR RequestAct::RequestAct(
    ::_pbi::ConstantInitialized)
  : action_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , head_(nullptr){}
struct RequestActDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RequestActDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RequestActDefaultTypeInternal() {}
  union {
    RequestAct _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RequestActDefaultTypeInternal _RequestAct_default_instance_;
PROTOBUF_CONSTEXPR ResponseAct::ResponseAct(
    ::_pbi::ConstantInitialized)
  : action_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , head_(nullptr){}
struct ResponseActDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResponseActDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResponseActDefaultTypeInternal() {}
  union {
    ResponseAct _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResponseActDefaultTypeInternal _ResponseAct_default_instance_;
}  // namespace MyGame
static ::_pb::Metadata file_level_metadata_msg_2eproto[7];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_msg_2eproto[1];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_msg_2eproto = nullptr;

const uint32_t TableStruct_msg_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::MyGame::MsgHead, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::MyGame::MsgHead, type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::MyGame::RequestLogin, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::MyGame::RequestLogin, head_),
  PROTOBUF_FIELD_OFFSET(::MyGame::RequestLogin, strname_),
  PROTOBUF_FIELD_OFFSET(::MyGame::RequestLogin, strpass_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::MyGame::ResponseLogin, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::MyGame::ResponseLogin, head_),
  PROTOBUF_FIELD_OFFSET(::MyGame::ResponseLogin, roleid_),
  PROTOBUF_FIELD_OFFSET(::MyGame::ResponseLogin, rolelevel_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::MyGame::RequestLogout, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::MyGame::RequestLogout, head_),
  PROTOBUF_FIELD_OFFSET(::MyGame::RequestLogout, roleid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::MyGame::ResponseLogout, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::MyGame::ResponseLogout, head_),
  PROTOBUF_FIELD_OFFSET(::MyGame::ResponseLogout, roleid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::MyGame::RequestAct, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::MyGame::RequestAct, head_),
  PROTOBUF_FIELD_OFFSET(::MyGame::RequestAct, action_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::MyGame::ResponseAct, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::MyGame::ResponseAct, head_),
  PROTOBUF_FIELD_OFFSET(::MyGame::ResponseAct, action_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::MyGame::MsgHead)},
  { 7, -1, -1, sizeof(::MyGame::RequestLogin)},
  { 16, -1, -1, sizeof(::MyGame::ResponseLogin)},
  { 25, -1, -1, sizeof(::MyGame::RequestLogout)},
  { 33, -1, -1, sizeof(::MyGame::ResponseLogout)},
  { 41, -1, -1, sizeof(::MyGame::RequestAct)},
  { 49, -1, -1, sizeof(::MyGame::ResponseAct)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::MyGame::_MsgHead_default_instance_._instance,
  &::MyGame::_RequestLogin_default_instance_._instance,
  &::MyGame::_ResponseLogin_default_instance_._instance,
  &::MyGame::_RequestLogout_default_instance_._instance,
  &::MyGame::_ResponseLogout_default_instance_._instance,
  &::MyGame::_RequestAct_default_instance_._instance,
  &::MyGame::_ResponseAct_default_instance_._instance,
};

const char descriptor_table_protodef_msg_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\tmsg.proto\022\006MyGame\"(\n\007MsgHead\022\035\n\004type\030\001"
  " \001(\0162\017.MyGame.MsgType\"O\n\014RequestLogin\022\035\n"
  "\004head\030\001 \001(\0132\017.MyGame.MsgHead\022\017\n\007strName\030"
  "\002 \001(\t\022\017\n\007strPass\030\003 \001(\t\"Q\n\rResponseLogin\022"
  "\035\n\004head\030\001 \001(\0132\017.MyGame.MsgHead\022\016\n\006roleId"
  "\030\002 \001(\005\022\021\n\troleLevel\030\003 \001(\005\">\n\rRequestLogo"
  "ut\022\035\n\004head\030\001 \001(\0132\017.MyGame.MsgHead\022\016\n\006rol"
  "eId\030\002 \001(\005\"\?\n\016ResponseLogout\022\035\n\004head\030\001 \001("
  "\0132\017.MyGame.MsgHead\022\016\n\006roleId\030\002 \001(\005\";\n\nRe"
  "questAct\022\035\n\004head\030\001 \001(\0132\017.MyGame.MsgHead\022"
  "\016\n\006action\030\002 \001(\t\"<\n\013ResponseAct\022\035\n\004head\030\001"
  " \001(\0132\017.MyGame.MsgHead\022\016\n\006action\030\002 \001(\t*A\n"
  "\007MsgType\022\021\n\rMsgType_Login\020\000\022\022\n\016MsgType_L"
  "ogout\020\001\022\017\n\013MsgType_Act\020\002b\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_msg_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_msg_2eproto = {
    false, false, 552, descriptor_table_protodef_msg_2eproto,
    "msg.proto",
    &descriptor_table_msg_2eproto_once, nullptr, 0, 7,
    schemas, file_default_instances, TableStruct_msg_2eproto::offsets,
    file_level_metadata_msg_2eproto, file_level_enum_descriptors_msg_2eproto,
    file_level_service_descriptors_msg_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_msg_2eproto_getter() {
  return &descriptor_table_msg_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_msg_2eproto(&descriptor_table_msg_2eproto);
namespace MyGame {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MsgType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_msg_2eproto);
  return file_level_enum_descriptors_msg_2eproto[0];
}
bool MsgType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class MsgHead::_Internal {
 public:
};

MsgHead::MsgHead(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:MyGame.MsgHead)
}
MsgHead::MsgHead(const MsgHead& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:MyGame.MsgHead)
}

inline void MsgHead::SharedCtor() {
type_ = 0;
}

MsgHead::~MsgHead() {
  // @@protoc_insertion_point(destructor:MyGame.MsgHead)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MsgHead::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void MsgHead::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MsgHead::Clear() {
// @@protoc_insertion_point(message_clear_start:MyGame.MsgHead)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MsgHead::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .MyGame.MsgType type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::MyGame::MsgType>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MsgHead::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:MyGame.MsgHead)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .MyGame.MsgType type = 1;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MyGame.MsgHead)
  return target;
}

size_t MsgHead::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MyGame.MsgHead)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .MyGame.MsgType type = 1;
  if (this->_internal_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MsgHead::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MsgHead::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MsgHead::GetClassData() const { return &_class_data_; }

void MsgHead::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<MsgHead *>(to)->MergeFrom(
      static_cast<const MsgHead &>(from));
}


void MsgHead::MergeFrom(const MsgHead& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MyGame.MsgHead)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_type() != 0) {
    _internal_set_type(from._internal_type());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MsgHead::CopyFrom(const MsgHead& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MyGame.MsgHead)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgHead::IsInitialized() const {
  return true;
}

void MsgHead::InternalSwap(MsgHead* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(type_, other->type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MsgHead::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_msg_2eproto_getter, &descriptor_table_msg_2eproto_once,
      file_level_metadata_msg_2eproto[0]);
}

// ===================================================================

class RequestLogin::_Internal {
 public:
  static const ::MyGame::MsgHead& head(const RequestLogin* msg);
};

const ::MyGame::MsgHead&
RequestLogin::_Internal::head(const RequestLogin* msg) {
  return *msg->head_;
}
RequestLogin::RequestLogin(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:MyGame.RequestLogin)
}
RequestLogin::RequestLogin(const RequestLogin& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  strname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    strname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_strname().empty()) {
    strname_.Set(from._internal_strname(), 
      GetArenaForAllocation());
  }
  strpass_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    strpass_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_strpass().empty()) {
    strpass_.Set(from._internal_strpass(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_head()) {
    head_ = new ::MyGame::MsgHead(*from.head_);
  } else {
    head_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:MyGame.RequestLogin)
}

inline void RequestLogin::SharedCtor() {
strname_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  strname_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
strpass_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  strpass_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
head_ = nullptr;
}

RequestLogin::~RequestLogin() {
  // @@protoc_insertion_point(destructor:MyGame.RequestLogin)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RequestLogin::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  strname_.Destroy();
  strpass_.Destroy();
  if (this != internal_default_instance()) delete head_;
}

void RequestLogin::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RequestLogin::Clear() {
// @@protoc_insertion_point(message_clear_start:MyGame.RequestLogin)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  strname_.ClearToEmpty();
  strpass_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && head_ != nullptr) {
    delete head_;
  }
  head_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RequestLogin::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .MyGame.MsgHead head = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_head(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string strName = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_strname();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "MyGame.RequestLogin.strName"));
        } else
          goto handle_unusual;
        continue;
      // string strPass = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_strpass();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "MyGame.RequestLogin.strPass"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RequestLogin::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:MyGame.RequestLogin)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .MyGame.MsgHead head = 1;
  if (this->_internal_has_head()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::head(this),
        _Internal::head(this).GetCachedSize(), target, stream);
  }

  // string strName = 2;
  if (!this->_internal_strname().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_strname().data(), static_cast<int>(this->_internal_strname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "MyGame.RequestLogin.strName");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_strname(), target);
  }

  // string strPass = 3;
  if (!this->_internal_strpass().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_strpass().data(), static_cast<int>(this->_internal_strpass().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "MyGame.RequestLogin.strPass");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_strpass(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MyGame.RequestLogin)
  return target;
}

size_t RequestLogin::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MyGame.RequestLogin)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string strName = 2;
  if (!this->_internal_strname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_strname());
  }

  // string strPass = 3;
  if (!this->_internal_strpass().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_strpass());
  }

  // .MyGame.MsgHead head = 1;
  if (this->_internal_has_head()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *head_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RequestLogin::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RequestLogin::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RequestLogin::GetClassData() const { return &_class_data_; }

void RequestLogin::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<RequestLogin *>(to)->MergeFrom(
      static_cast<const RequestLogin &>(from));
}


void RequestLogin::MergeFrom(const RequestLogin& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MyGame.RequestLogin)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_strname().empty()) {
    _internal_set_strname(from._internal_strname());
  }
  if (!from._internal_strpass().empty()) {
    _internal_set_strpass(from._internal_strpass());
  }
  if (from._internal_has_head()) {
    _internal_mutable_head()->::MyGame::MsgHead::MergeFrom(from._internal_head());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RequestLogin::CopyFrom(const RequestLogin& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MyGame.RequestLogin)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestLogin::IsInitialized() const {
  return true;
}

void RequestLogin::InternalSwap(RequestLogin* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &strname_, lhs_arena,
      &other->strname_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &strpass_, lhs_arena,
      &other->strpass_, rhs_arena
  );
  swap(head_, other->head_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RequestLogin::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_msg_2eproto_getter, &descriptor_table_msg_2eproto_once,
      file_level_metadata_msg_2eproto[1]);
}

// ===================================================================

class ResponseLogin::_Internal {
 public:
  static const ::MyGame::MsgHead& head(const ResponseLogin* msg);
};

const ::MyGame::MsgHead&
ResponseLogin::_Internal::head(const ResponseLogin* msg) {
  return *msg->head_;
}
ResponseLogin::ResponseLogin(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:MyGame.ResponseLogin)
}
ResponseLogin::ResponseLogin(const ResponseLogin& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_head()) {
    head_ = new ::MyGame::MsgHead(*from.head_);
  } else {
    head_ = nullptr;
  }
  ::memcpy(&roleid_, &from.roleid_,
    static_cast<size_t>(reinterpret_cast<char*>(&rolelevel_) -
    reinterpret_cast<char*>(&roleid_)) + sizeof(rolelevel_));
  // @@protoc_insertion_point(copy_constructor:MyGame.ResponseLogin)
}

inline void ResponseLogin::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&head_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&rolelevel_) -
    reinterpret_cast<char*>(&head_)) + sizeof(rolelevel_));
}

ResponseLogin::~ResponseLogin() {
  // @@protoc_insertion_point(destructor:MyGame.ResponseLogin)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ResponseLogin::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete head_;
}

void ResponseLogin::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ResponseLogin::Clear() {
// @@protoc_insertion_point(message_clear_start:MyGame.ResponseLogin)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && head_ != nullptr) {
    delete head_;
  }
  head_ = nullptr;
  ::memset(&roleid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&rolelevel_) -
      reinterpret_cast<char*>(&roleid_)) + sizeof(rolelevel_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ResponseLogin::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .MyGame.MsgHead head = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_head(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 roleId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          roleid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 roleLevel = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          rolelevel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ResponseLogin::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:MyGame.ResponseLogin)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .MyGame.MsgHead head = 1;
  if (this->_internal_has_head()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::head(this),
        _Internal::head(this).GetCachedSize(), target, stream);
  }

  // int32 roleId = 2;
  if (this->_internal_roleid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_roleid(), target);
  }

  // int32 roleLevel = 3;
  if (this->_internal_rolelevel() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_rolelevel(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MyGame.ResponseLogin)
  return target;
}

size_t ResponseLogin::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MyGame.ResponseLogin)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .MyGame.MsgHead head = 1;
  if (this->_internal_has_head()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *head_);
  }

  // int32 roleId = 2;
  if (this->_internal_roleid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_roleid());
  }

  // int32 roleLevel = 3;
  if (this->_internal_rolelevel() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_rolelevel());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ResponseLogin::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ResponseLogin::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ResponseLogin::GetClassData() const { return &_class_data_; }

void ResponseLogin::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ResponseLogin *>(to)->MergeFrom(
      static_cast<const ResponseLogin &>(from));
}


void ResponseLogin::MergeFrom(const ResponseLogin& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MyGame.ResponseLogin)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_head()) {
    _internal_mutable_head()->::MyGame::MsgHead::MergeFrom(from._internal_head());
  }
  if (from._internal_roleid() != 0) {
    _internal_set_roleid(from._internal_roleid());
  }
  if (from._internal_rolelevel() != 0) {
    _internal_set_rolelevel(from._internal_rolelevel());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ResponseLogin::CopyFrom(const ResponseLogin& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MyGame.ResponseLogin)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseLogin::IsInitialized() const {
  return true;
}

void ResponseLogin::InternalSwap(ResponseLogin* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ResponseLogin, rolelevel_)
      + sizeof(ResponseLogin::rolelevel_)
      - PROTOBUF_FIELD_OFFSET(ResponseLogin, head_)>(
          reinterpret_cast<char*>(&head_),
          reinterpret_cast<char*>(&other->head_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ResponseLogin::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_msg_2eproto_getter, &descriptor_table_msg_2eproto_once,
      file_level_metadata_msg_2eproto[2]);
}

// ===================================================================

class RequestLogout::_Internal {
 public:
  static const ::MyGame::MsgHead& head(const RequestLogout* msg);
};

const ::MyGame::MsgHead&
RequestLogout::_Internal::head(const RequestLogout* msg) {
  return *msg->head_;
}
RequestLogout::RequestLogout(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:MyGame.RequestLogout)
}
RequestLogout::RequestLogout(const RequestLogout& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_head()) {
    head_ = new ::MyGame::MsgHead(*from.head_);
  } else {
    head_ = nullptr;
  }
  roleid_ = from.roleid_;
  // @@protoc_insertion_point(copy_constructor:MyGame.RequestLogout)
}

inline void RequestLogout::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&head_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&roleid_) -
    reinterpret_cast<char*>(&head_)) + sizeof(roleid_));
}

RequestLogout::~RequestLogout() {
  // @@protoc_insertion_point(destructor:MyGame.RequestLogout)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RequestLogout::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete head_;
}

void RequestLogout::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RequestLogout::Clear() {
// @@protoc_insertion_point(message_clear_start:MyGame.RequestLogout)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && head_ != nullptr) {
    delete head_;
  }
  head_ = nullptr;
  roleid_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RequestLogout::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .MyGame.MsgHead head = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_head(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 roleId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          roleid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RequestLogout::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:MyGame.RequestLogout)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .MyGame.MsgHead head = 1;
  if (this->_internal_has_head()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::head(this),
        _Internal::head(this).GetCachedSize(), target, stream);
  }

  // int32 roleId = 2;
  if (this->_internal_roleid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_roleid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MyGame.RequestLogout)
  return target;
}

size_t RequestLogout::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MyGame.RequestLogout)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .MyGame.MsgHead head = 1;
  if (this->_internal_has_head()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *head_);
  }

  // int32 roleId = 2;
  if (this->_internal_roleid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_roleid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RequestLogout::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RequestLogout::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RequestLogout::GetClassData() const { return &_class_data_; }

void RequestLogout::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<RequestLogout *>(to)->MergeFrom(
      static_cast<const RequestLogout &>(from));
}


void RequestLogout::MergeFrom(const RequestLogout& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MyGame.RequestLogout)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_head()) {
    _internal_mutable_head()->::MyGame::MsgHead::MergeFrom(from._internal_head());
  }
  if (from._internal_roleid() != 0) {
    _internal_set_roleid(from._internal_roleid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RequestLogout::CopyFrom(const RequestLogout& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MyGame.RequestLogout)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestLogout::IsInitialized() const {
  return true;
}

void RequestLogout::InternalSwap(RequestLogout* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RequestLogout, roleid_)
      + sizeof(RequestLogout::roleid_)
      - PROTOBUF_FIELD_OFFSET(RequestLogout, head_)>(
          reinterpret_cast<char*>(&head_),
          reinterpret_cast<char*>(&other->head_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RequestLogout::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_msg_2eproto_getter, &descriptor_table_msg_2eproto_once,
      file_level_metadata_msg_2eproto[3]);
}

// ===================================================================

class ResponseLogout::_Internal {
 public:
  static const ::MyGame::MsgHead& head(const ResponseLogout* msg);
};

const ::MyGame::MsgHead&
ResponseLogout::_Internal::head(const ResponseLogout* msg) {
  return *msg->head_;
}
ResponseLogout::ResponseLogout(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:MyGame.ResponseLogout)
}
ResponseLogout::ResponseLogout(const ResponseLogout& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_head()) {
    head_ = new ::MyGame::MsgHead(*from.head_);
  } else {
    head_ = nullptr;
  }
  roleid_ = from.roleid_;
  // @@protoc_insertion_point(copy_constructor:MyGame.ResponseLogout)
}

inline void ResponseLogout::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&head_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&roleid_) -
    reinterpret_cast<char*>(&head_)) + sizeof(roleid_));
}

ResponseLogout::~ResponseLogout() {
  // @@protoc_insertion_point(destructor:MyGame.ResponseLogout)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ResponseLogout::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete head_;
}

void ResponseLogout::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ResponseLogout::Clear() {
// @@protoc_insertion_point(message_clear_start:MyGame.ResponseLogout)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && head_ != nullptr) {
    delete head_;
  }
  head_ = nullptr;
  roleid_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ResponseLogout::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .MyGame.MsgHead head = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_head(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 roleId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          roleid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ResponseLogout::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:MyGame.ResponseLogout)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .MyGame.MsgHead head = 1;
  if (this->_internal_has_head()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::head(this),
        _Internal::head(this).GetCachedSize(), target, stream);
  }

  // int32 roleId = 2;
  if (this->_internal_roleid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_roleid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MyGame.ResponseLogout)
  return target;
}

size_t ResponseLogout::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MyGame.ResponseLogout)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .MyGame.MsgHead head = 1;
  if (this->_internal_has_head()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *head_);
  }

  // int32 roleId = 2;
  if (this->_internal_roleid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_roleid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ResponseLogout::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ResponseLogout::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ResponseLogout::GetClassData() const { return &_class_data_; }

void ResponseLogout::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ResponseLogout *>(to)->MergeFrom(
      static_cast<const ResponseLogout &>(from));
}


void ResponseLogout::MergeFrom(const ResponseLogout& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MyGame.ResponseLogout)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_head()) {
    _internal_mutable_head()->::MyGame::MsgHead::MergeFrom(from._internal_head());
  }
  if (from._internal_roleid() != 0) {
    _internal_set_roleid(from._internal_roleid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ResponseLogout::CopyFrom(const ResponseLogout& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MyGame.ResponseLogout)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseLogout::IsInitialized() const {
  return true;
}

void ResponseLogout::InternalSwap(ResponseLogout* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ResponseLogout, roleid_)
      + sizeof(ResponseLogout::roleid_)
      - PROTOBUF_FIELD_OFFSET(ResponseLogout, head_)>(
          reinterpret_cast<char*>(&head_),
          reinterpret_cast<char*>(&other->head_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ResponseLogout::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_msg_2eproto_getter, &descriptor_table_msg_2eproto_once,
      file_level_metadata_msg_2eproto[4]);
}

// ===================================================================

class RequestAct::_Internal {
 public:
  static const ::MyGame::MsgHead& head(const RequestAct* msg);
};

const ::MyGame::MsgHead&
RequestAct::_Internal::head(const RequestAct* msg) {
  return *msg->head_;
}
RequestAct::RequestAct(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:MyGame.RequestAct)
}
RequestAct::RequestAct(const RequestAct& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  action_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    action_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_action().empty()) {
    action_.Set(from._internal_action(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_head()) {
    head_ = new ::MyGame::MsgHead(*from.head_);
  } else {
    head_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:MyGame.RequestAct)
}

inline void RequestAct::SharedCtor() {
action_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  action_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
head_ = nullptr;
}

RequestAct::~RequestAct() {
  // @@protoc_insertion_point(destructor:MyGame.RequestAct)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RequestAct::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  action_.Destroy();
  if (this != internal_default_instance()) delete head_;
}

void RequestAct::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RequestAct::Clear() {
// @@protoc_insertion_point(message_clear_start:MyGame.RequestAct)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  action_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && head_ != nullptr) {
    delete head_;
  }
  head_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RequestAct::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .MyGame.MsgHead head = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_head(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string action = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_action();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "MyGame.RequestAct.action"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RequestAct::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:MyGame.RequestAct)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .MyGame.MsgHead head = 1;
  if (this->_internal_has_head()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::head(this),
        _Internal::head(this).GetCachedSize(), target, stream);
  }

  // string action = 2;
  if (!this->_internal_action().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_action().data(), static_cast<int>(this->_internal_action().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "MyGame.RequestAct.action");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_action(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MyGame.RequestAct)
  return target;
}

size_t RequestAct::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MyGame.RequestAct)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string action = 2;
  if (!this->_internal_action().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_action());
  }

  // .MyGame.MsgHead head = 1;
  if (this->_internal_has_head()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *head_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RequestAct::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RequestAct::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RequestAct::GetClassData() const { return &_class_data_; }

void RequestAct::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<RequestAct *>(to)->MergeFrom(
      static_cast<const RequestAct &>(from));
}


void RequestAct::MergeFrom(const RequestAct& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MyGame.RequestAct)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_action().empty()) {
    _internal_set_action(from._internal_action());
  }
  if (from._internal_has_head()) {
    _internal_mutable_head()->::MyGame::MsgHead::MergeFrom(from._internal_head());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RequestAct::CopyFrom(const RequestAct& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MyGame.RequestAct)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestAct::IsInitialized() const {
  return true;
}

void RequestAct::InternalSwap(RequestAct* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &action_, lhs_arena,
      &other->action_, rhs_arena
  );
  swap(head_, other->head_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RequestAct::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_msg_2eproto_getter, &descriptor_table_msg_2eproto_once,
      file_level_metadata_msg_2eproto[5]);
}

// ===================================================================

class ResponseAct::_Internal {
 public:
  static const ::MyGame::MsgHead& head(const ResponseAct* msg);
};

const ::MyGame::MsgHead&
ResponseAct::_Internal::head(const ResponseAct* msg) {
  return *msg->head_;
}
ResponseAct::ResponseAct(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:MyGame.ResponseAct)
}
ResponseAct::ResponseAct(const ResponseAct& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  action_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    action_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_action().empty()) {
    action_.Set(from._internal_action(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_head()) {
    head_ = new ::MyGame::MsgHead(*from.head_);
  } else {
    head_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:MyGame.ResponseAct)
}

inline void ResponseAct::SharedCtor() {
action_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  action_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
head_ = nullptr;
}

ResponseAct::~ResponseAct() {
  // @@protoc_insertion_point(destructor:MyGame.ResponseAct)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ResponseAct::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  action_.Destroy();
  if (this != internal_default_instance()) delete head_;
}

void ResponseAct::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ResponseAct::Clear() {
// @@protoc_insertion_point(message_clear_start:MyGame.ResponseAct)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  action_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && head_ != nullptr) {
    delete head_;
  }
  head_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ResponseAct::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .MyGame.MsgHead head = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_head(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string action = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_action();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "MyGame.ResponseAct.action"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ResponseAct::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:MyGame.ResponseAct)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .MyGame.MsgHead head = 1;
  if (this->_internal_has_head()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::head(this),
        _Internal::head(this).GetCachedSize(), target, stream);
  }

  // string action = 2;
  if (!this->_internal_action().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_action().data(), static_cast<int>(this->_internal_action().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "MyGame.ResponseAct.action");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_action(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MyGame.ResponseAct)
  return target;
}

size_t ResponseAct::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MyGame.ResponseAct)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string action = 2;
  if (!this->_internal_action().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_action());
  }

  // .MyGame.MsgHead head = 1;
  if (this->_internal_has_head()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *head_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ResponseAct::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ResponseAct::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ResponseAct::GetClassData() const { return &_class_data_; }

void ResponseAct::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ResponseAct *>(to)->MergeFrom(
      static_cast<const ResponseAct &>(from));
}


void ResponseAct::MergeFrom(const ResponseAct& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MyGame.ResponseAct)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_action().empty()) {
    _internal_set_action(from._internal_action());
  }
  if (from._internal_has_head()) {
    _internal_mutable_head()->::MyGame::MsgHead::MergeFrom(from._internal_head());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ResponseAct::CopyFrom(const ResponseAct& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MyGame.ResponseAct)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseAct::IsInitialized() const {
  return true;
}

void ResponseAct::InternalSwap(ResponseAct* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &action_, lhs_arena,
      &other->action_, rhs_arena
  );
  swap(head_, other->head_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ResponseAct::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_msg_2eproto_getter, &descriptor_table_msg_2eproto_once,
      file_level_metadata_msg_2eproto[6]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace MyGame
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::MyGame::MsgHead*
Arena::CreateMaybeMessage< ::MyGame::MsgHead >(Arena* arena) {
  return Arena::CreateMessageInternal< ::MyGame::MsgHead >(arena);
}
template<> PROTOBUF_NOINLINE ::MyGame::RequestLogin*
Arena::CreateMaybeMessage< ::MyGame::RequestLogin >(Arena* arena) {
  return Arena::CreateMessageInternal< ::MyGame::RequestLogin >(arena);
}
template<> PROTOBUF_NOINLINE ::MyGame::ResponseLogin*
Arena::CreateMaybeMessage< ::MyGame::ResponseLogin >(Arena* arena) {
  return Arena::CreateMessageInternal< ::MyGame::ResponseLogin >(arena);
}
template<> PROTOBUF_NOINLINE ::MyGame::RequestLogout*
Arena::CreateMaybeMessage< ::MyGame::RequestLogout >(Arena* arena) {
  return Arena::CreateMessageInternal< ::MyGame::RequestLogout >(arena);
}
template<> PROTOBUF_NOINLINE ::MyGame::ResponseLogout*
Arena::CreateMaybeMessage< ::MyGame::ResponseLogout >(Arena* arena) {
  return Arena::CreateMessageInternal< ::MyGame::ResponseLogout >(arena);
}
template<> PROTOBUF_NOINLINE ::MyGame::RequestAct*
Arena::CreateMaybeMessage< ::MyGame::RequestAct >(Arena* arena) {
  return Arena::CreateMessageInternal< ::MyGame::RequestAct >(arena);
}
template<> PROTOBUF_NOINLINE ::MyGame::ResponseAct*
Arena::CreateMaybeMessage< ::MyGame::ResponseAct >(Arena* arena) {
  return Arena::CreateMessageInternal< ::MyGame::ResponseAct >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
